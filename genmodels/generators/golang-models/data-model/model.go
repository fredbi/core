package model

import (
	"sort"

	"github.com/fredbi/core/jsonschema/analyzers"
)

// TargetModel holds the data model for templates generating models.
//
// There is one [TargetModel] structure per generated target file.
//
// A single [TargetModel] contains one or several [TargetSchema] to be generated in the same file.
type TargetModel struct {
	GenModelOptions
	TargetCodeFlags // kind of target file
	LocationInfo    // file, path, package info

	ID             analyzers.UniqueID // unique ID for this model, e.g. a UUID
	Name           string             // original name (from the spec, if any), e.g. "model"
	RelatedParent  analyzers.UniqueID // marks that a type, originally an anonymous schema and with an autogenerated type, has its parent there
	UltimateParent analyzers.UniqueID // marks that a type, should be merged as a schema of this root
	Imports        ImportsMap         // imported go packages
	Schemas        []TargetSchema     // all the schemas (i.e. go types) to produce in a single source model file
}

func (m *TargetModel) MergeSchemas(from []TargetSchema) {
	m.Schemas = append(m.Schemas, from...)
	const shouldSortLen = 2

	if len(m.Schemas) < shouldSortLen {
		return
	}

	sort.SliceStable(m.Schemas, func(i, j int) bool {
		// Index[i] < Index[j]  <=> "j depends on i"
		//
		// We want dependencies to appear _after_ their parent in the generated source code
		return m.Schemas[i].Index < m.Schemas[j].Index
	})
}

type GenModelOptions struct {
	*GenOptions
}
